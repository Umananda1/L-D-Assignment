#include <iostream>
using namespace std;

void inputMatrix(int matrix[100][100], int rows, int cols) {
    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }
}

void printMatrix(int matrix[100][100], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

void addMatrices(int A[100][100], int B[100][100], int result[100][100], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = A[i][j] + B[i][j];
        }
    }
}

void multiplyMatrices(int A[100][100], int B[100][100], int result[100][100], int r1, int c1, int r2, int c2) {
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            result[i][j] = 0;  // Initialize the result matrix element
            for (int k = 0; k < c1; k++) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void transposeMatrix(int A[100][100], int result[100][100], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[j][i] = A[i][j];  // Transpose by swapping rows and columns
        }
    }
}

int main() {
    int A[100][100], B[100][100], result[100][100];
    int rows1, cols1, rows2, cols2;

    // Input for first matrix
    cout << "Enter the number of rows and columns for Matrix A: ";
    cin >> rows1 >> cols1;
    inputMatrix(A, rows1, cols1);

    // Input for second matrix
    cout << "Enter the number of rows and columns for Matrix B: ";
    cin >> rows2 >> cols2;
    inputMatrix(B, rows2, cols2);

    // Matrix Addition
    if (rows1 == rows2 && cols1 == cols2) {
        cout << "\nMatrix Addition:" << endl;
        addMatrices(A, B, result, rows1, cols1);
        printMatrix(result, rows1, cols1);
    } else {
        cout << "\nMatrix addition is not possible. The matrices must have the same dimensions." << endl;
    }

    // Matrix Multiplication
    if (cols1 == rows2) {
        cout << "\nMatrix Multiplication:" << endl;
        multiplyMatrices(A, B, result, rows1, cols1, rows2, cols2);
        printMatrix(result, rows1, cols2);
    } else {
        cout << "\nMatrix multiplication is not possible. Number of columns in Matrix A must be equal to the number of rows in Matrix B." << endl;
    }

    // Transpose of Matrix A
    cout << "\nTranspose of Matrix A:" << endl;
    transposeMatrix(A, result, rows1, cols1);
    printMatrix(result, cols1, rows1);

    // Transpose of Matrix B
    cout << "\nTranspose of Matrix B:" << endl;
    transposeMatrix(B, result, rows2, cols2);
    printMatrix(result, cols2, rows2);

    return 0;
}

output:--

Enter the number of rows and columns for Matrix A: 2 2
Enter the elements of the matrix:
1 2
3 4

Enter the number of rows and columns for Matrix B: 2 2
Enter the elements of the matrix:
5 6
7 8

Matrix Addition:
6 8 
10 12 

Matrix Multiplication:
19 22 
43 50 

Transpose of Matrix A:
1 3 
2 4 

Transpose of Matrix B:
5 7 
6 8 
